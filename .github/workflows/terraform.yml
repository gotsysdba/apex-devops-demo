name: 'Terraform'

on:
  create:
    branches-ignore:
      - main
  delete:
    branches-ignore:
      - main

permissions:
  contents: read

env: 
  # OCI API Access
  TF_VAR_compartment_ocid: ${{ secrets.TF_VAR_COMPARTMENT_OCID }}
  TF_VAR_region: ${{ secrets.TF_VAR_REGION }}
  TF_VAR_private_key: ${{ secrets.TF_VAR_PRIVATE_KEY }}
  TF_VAR_tenancy_ocid: ${{ secrets.TF_VAR_TENANCY_OCID }}
  TF_VAR_user_ocid: ${{ secrets.TF_VAR_USER_OCID }}
  TF_VAR_fingerprint: ${{ secrets.TF_VAR_FINGERPRINT }}

  # Remote Backend Access
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

  DELETE_BRANCH: ${{ github.event.ref }} 
  CREATE_BRANCH: ${{ github.ref_name }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: staging_environment

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Create Workspace (new causes select, but do select for retries)
    # main branch will use the default workspace
    - name: Terraform New Workspace
      continue-on-error: true
      if: github.event_name == 'create' and github.ref_name != 'main'
      run: |
        terraform workspace new ${CREATE_BRANCH}
        terraform workspace select ${CREATE_BRANCH}

    # Select to Delete Workspace
    - name: Terraform Select Workspace
      if: github.event_name == 'delete'
      run: terraform workspace select ${DELETE_BRANCH}

    - name: Terraform Plan
      if: github.event_name == 'create'
      run: TF_VAR_branch="dev${CREATE_BRANCH%%-*}" terraform plan

    # Perform a Terraform apply/destroy
    - name: Terraform Apply
      if: github.event_name == 'create'
      run: TF_VAR_branch="dev${CREATE_BRANCH%%-*}" terraform apply -auto-approve -input=false

    - name: Terraform Destroy
      if: github.event_name == 'delete'
      run: TF_VAR_branch="dev${DELETE_BRANCH%%-*}" terraform destroy -auto-approve -input=false

    # Switch to Workspace
    - name: Terraform Switch Workspace
      run: terraform workspace select default

    # Destroy Workspace
    - name: Terraform Delete Workspace
      if: github.event_name == 'delete'
      run: terraform workspace delete ${DELETE_BRANCH}